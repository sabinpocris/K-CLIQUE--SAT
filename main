#!/usr/bin/env python3
# author --> Pocris Sabin - 322CB
import sys

def parse_file(file_input):
  # an array of arrays with the numbers from every line
  lines = []

  # read the file line by line
  for line in file_input:
    if (line == "\n"):
      continue

    # split each line by " " and convert the resulting words to int
    line = line.split(" ")
    line = [int(x) for x in line]

    # save the line
    lines.append(line)

  return lines

def build_graph(file_input):
  file_data = parse_file(file_input)

  dim_graph = file_data[0][0]
  k = file_data[0][1]

  graph = [[0 for x in range(dim_graph)] for y in range(dim_graph)]

  for i in range(1, len(file_data)):
    for j in file_data[i]:
      graph[i-1][j-1] = 1
      graph[j-1][i-1] = 1 

  return (dim_graph, k, graph)

def build_variables_dictionary(V, k):
  count = 1
  variables = {}

  for i in range(1, k + 1):
    for j in range(1, V + 1):
      variables[str(i) + "," + str(j)] = count
      count += 1
  
  return variables

def number_of_clauses(out):
  return str(out.count('\n') + 1)

def main():
  file_input = open(sys.argv[1], "r")
  file_output = open(sys.argv[2], "w")
  output = "" # string that will be written to the output file

  (V, k, graph) = build_graph(file_input)
  variables = build_variables_dictionary(V, k)

  ### 1. does the i-th vertex exists
  for i in range(1, k + 1):
    for j in range(1, V + 1):
      output += (str(variables[str(i) + "," + str(j)]) + " ")
    output = output[:-1] + " 0\n"
  
  ### 2. is the vertex unique? (i-th != j-th)
  for i in range(1, k + 1):
    for j in range(i + 1, k + 1):
        for v in range(1, V + 1):
          output += ("-" + str(variables[str(i) + "," + str(v)]) + " ")
          output += ("-" + str(variables[str(j) + "," + str(v)]) + " 0\n")

  ### 3. (V) 2 nodes, they are connected
  for i in range(1, k + 1):
    for j in range(i + 1, k + 1):
        for v in range(1, V + 1):
          for u in range (1, V + 1):
            if graph[u-1][v-1] == 1:
              continue
            output += ("-" + str(variables[str(i) + "," + str(v)]) + " ")
            output += ("-" + str(variables[str(j) + "," + str(u)]) + " 0\n")
  
  # writing the output
  file_output.write("p cnf " + str(len(variables)) + " " + number_of_clauses(output) + "\n")
  file_output.write(output)
  
  # closing the files
  file_input.close()
  file_output.close()

  return 0


if __name__ == "__main__":
  main()